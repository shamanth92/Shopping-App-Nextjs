name: Lint, Test, Build and Push Frontend Image to AWS

on:
  push:
  pull_request:

jobs:
  eslint-test:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_FIREBASE_CONFIG_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_CONFIG_KEY }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"

      - name: Install dependencies
        run: npm install

      - name: Run Linting
        run: npm run lint

      - name: Run Jest tests
        run: npm run test

  build-and-push:
    if: github.ref == 'refs/heads/main'
    needs: eslint-test
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_FIREBASE_CONFIG_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_CONFIG_KEY }}
      API_URL: ${{ secrets.API_URL }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # 2. Configure AWS credentials (from GitHub Secrets)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # 4. Build, tag, and push Docker image
      - name: Build and Push Docker image
        run: |
          IMAGE_REPO_NAME=${{ secrets.AWS_ECR_REPO }}
          IMAGE_TAG=${{ github.sha }}

          # Full ECR repo URI (from login step)
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_URI=$ECR_REGISTRY/$IMAGE_REPO_NAME:$IMAGE_TAG

          echo "Building image: $IMAGE_URI"

          docker build \
            --build-arg NEXT_PUBLIC_FIREBASE_CONFIG_KEY="$NEXT_PUBLIC_FIREBASE_CONFIG_KEY" \
            --build-arg API_URL="$API_URL" \
            -t $IMAGE_URI .

          docker push $IMAGE_URI

          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

  trigger-devops-deployment:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          repository: ${{ secrets.DEVOPS_REPO }}
          event-type: deploy-to-eks
          client-payload: '{"image":"myprojects/shopping-app","tag":"${{ github.sha }}"}'
